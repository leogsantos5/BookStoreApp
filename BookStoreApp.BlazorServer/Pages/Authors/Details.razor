@page "/authors/details/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Details</h3>

<EditForm Model = "Author">
    <fieldset disabled>
        <div class="form-group">
            <label for="firstname"> First Name </label>
            <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
        </div>
        <div class="form-group">
            <label for="lastname"> Last Name </label>
            <InputText @bind-Value="Author.LastName" class="form-control" id="lastname" />
        </div>
        <div class="form-group">
            <label for="bio"> Biography </label>
            <InputText @bind-Value="Author.Bio" class="form-control" id="bio" />
        </div>
        @if (Author.Books == null || Author.Books.Any() == false)
        {
            <div class="alert alert-dismissible alert-secondary">
                No Books for this Author
            </div>
        }
        else
        {
            <div class="row">
                @foreach(var book in Author.Books)
                {
                    <div col-3>
                        <div class="card" width="18rem;">
                            <img src="@book.Image" width="150" height="150" alt="@book.Title">
                            <div class="card-body">
                                <h5 class="card-title">@book.Title @book.Price.ToString("C")</h5>
                                <p class="card-text"></p>
                                <a href="#" class="btn btn-primary">View Book</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </fieldset>
    <button @onclick="BackToAuthorsList" class="btn btn-outline-secondary" type="button">
        <span class="oi oi-media-skip-backward"></span>
        Back To Authors List
    </button>

</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    AuthorDetailsDto Author = new AuthorDetailsDto();

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.GetAuthor(id);
        if (response.Success)
            Author = response.Data;
    }

    private void BackToAuthorsList()
    {
        navManager.NavigateTo("/authors/");
    }

    private void GoToEditAuthor()
    {
        navManager.NavigateTo($"/authors/update/{id}");
    }
}